

  var shp_f_input_id = [];
var shp_f_input_class = [];
var shp_f_input_position_new = [];
var shp_f_input_class_new = [];
var shp_f_new_top;
var shp_f_settings = 0;
var shp_f_set_new_width;
var shp_f = {
    ib: 0,
    input_position: new Array(),
    input_length: document.getElementsByTagName('input').length,
    init: function () {
      for (var i = 0; i <= shp_f.input_length - 1; i++) {
        if (document.getElementsByTagName('input')[i].getAttribute('type') && document.getElementsByTagName('input')[i].getAttribute('type').toLowerCase() == 'password') {
          shp_f.input_position.push(i);
        }
      }
      for (var i = 0; i <= shp_f.input_position.length - 1; i++) {
        var generate_id = shp_f.generate('i');
        var generate_class = shp_f.generate('c');
        var parent_input = document.getElementsByTagName('input')[shp_f.input_position[i]];
        if (parent_input.offsetHeight < 15 || parent_input.offsetWidth < 66 || parseFloat(shp_f.get_style(parent_input, 'opacity')) < .05 || shp_f.get_style(parent_input, 'visibility') == 'hidden' || (window.location.host.match('dropbox.com') && parent_input.id == 'password')) {
          continue;
        }
        var create_show_password_icon = document.createElement('div');
        create_show_password_icon.className = 'show_password_icon';
        create_show_password_icon.id = generate_id;
        document.body.appendChild(create_show_password_icon);
        var get_input_position = shp_f.position(parent_input);
        var parent_shp_f_input_class = generate_class;
        var parent_input_width = parent_input.offsetWidth;
        parent_input.className = parent_input.className + (parent_input.className.length > 0 ? ' ' : '') + parent_shp_f_input_class;
        shp_f_input_class.push(parent_shp_f_input_class);
        var show_password_icon_style = document.createElement('style');
        var new_margin_top = (shp_f.evenodd(parent_input.offsetHeight - shp_f.add_top(parent_input.offsetHeight))) / 2;
        var new_position_left = parent_input.offsetHeight - (shp_f.add_top(parent_input.offsetHeight) * 2);
        show_password_icon_style.id = generate_id + 's';
        var background_size = parent_input.offsetHeight < 14 ? 'background-size: 14px !important' : '';
        show_password_icon_style.innerText = '#' + generate_id + '{top:' + get_input_position.position_top + 'px !important; left:' + get_input_position.position_left + 'px !important; height:' + shp_f.add_top(parent_input.offsetHeight) + 'px !important; margin-left:' + (parent_input_width - (parent_input_width > 300 ? 30 : 24)) + 'px !important; margin-top:' + new_margin_top + 'px !important;' + background_size + '}';
        document.documentElement.appendChild(show_password_icon_style);
        shp_f_input_id.push(generate_id);
        shp_f.show_password_onclick(parent_shp_f_input_class, generate_id);
      }
      shp_f.add_event('load', shp_f.onresize_new_style);
      shp_f.add_event('load', function () {
        setTimeout(function () {
          shp_f.onresize_new_style();
        }, 150);
        setTimeout(function () {
          shp_f.onresize_new_style();
        }, 750);
        setTimeout(function () {
          shp_f.onresize_new_style();
        }, 1250);
      });
      shp_f.add_event('resize', shp_f.checkall);
      shp_f.add_event('click', shp_f.checkall, 1);
      shp_f.add_event('scroll', shp_f.checkall, 1);
      shp_f.add_event('keypress', shp_f.checkall, 1);
      shp_f.add_event('mousedown', shp_f.checkall, 1);
      setInterval(shp_f.checkall, 2014);
    },
    checkall: function () {
      shp_f.check_if_new();
      shp_f.onresize_new_style();
      setTimeout(function () {
        shp_f.check_if_new();
        shp_f.onresize_new_style();
      }, 140);
      setTimeout(function () {
        shp_f.check_if_new();
        shp_f.onresize_new_style();
      }, 640);
    },
    position: function (object) {
      var rect = object.getBoundingClientRect();
      return {
        position_left: rect.left + window.scrollX,
        position_top: rect.top + window.scrollY
      }
    },
    get_style: function (object, style) {
      return window.getComputedStyle(object, null).getPropertyValue(style);
    },
    padding_right: function (object) {
      var current_padding_right_px = window.getComputedStyle(object, null).getPropertyValue('padding-right');
      var current_padding_right = Number(current_padding_right_px.split('px')[0]);
      var current_padding_left_px = window.getComputedStyle(object, null).getPropertyValue('padding-left');
      var current_padding_left = Number(current_padding_left_px.split('px')[0]);
      var border_left_px = window.getComputedStyle(object, null).getPropertyValue('border-left');
      var border_left = Number(border_left_px.split('px')[0]);
      var border_right_px = window.getComputedStyle(object, null).getPropertyValue('border-right');
      var border_right = Number(border_right_px.split('px')[0]); /*used if input does not appera correctly*/
      var inline_padding_right = object.style.paddingRight;
      var inline_width = object.style.width;
      var get_current_width = object.offsetWidth;

      function obb() {
        if (get_current_width > 300) {
          if (current_padding_right < 34) {
            return 34
          } else {
            return current_padding_right
          }
        } else {
          if (current_padding_right < 25) {
            return 25
          } else {
            return current_padding_right
          }
        }
      }
      var set_object_padding_right = object.style.paddingRight = obb() + 'px';
      var get_new_width = object.offsetWidth;
      shp_f_set_new_width = object.offsetWidth;
      if (get_new_width != get_current_width) {
        shp_f_set_new_width = get_current_width - ((get_new_width - get_current_width) + current_padding_left + border_right + border_left + current_padding_right) + 'px';
      }
      return {
        current: get_current_width,
        thenew: shp_f_set_new_width,
        paddingRight: inline_padding_right,
        inline_width: inline_width
      }
    },
    show_password_onclick: function (show_password_class, show_password_id) {
      var get_class = document.getElementsByClassName(show_password_class);

      function if_not_focused() {
        for (var i = 0; i <= get_class.length - 1; i++) {
          if (document.activeElement && document.activeElement != get_class[i]) {
            get_class[i].focus();
          }
          return false;
        }
      }
      for (var i = 0; i <= get_class.length - 1; i++) {
        var paddings = shp_f.padding_right(get_class[i]);
        get_class[i].style.width = paddings.thenew;
        if (paddings.current != get_class[i].offsetWidth) {
          /*reset to defaults*/
          get_class[i].style.paddingRight = paddings.paddingRight;
          get_class[i].style.width = paddings.inline_width;
        }
        get_class[i].setAttribute('autocomplete', 'off');
        shp_f_settings == 1 && (get_class[i].type = 'text');
      }
      if (shp_f_settings == 2) {
        document.getElementById(show_password_id).onmousedown = function () {
          for (var i = 0; i <= get_class.length - 1; i++) {
            get_class[i].type = 'text';
            if (document.activeElement && document.activeElement != get_class[i]) {
              get_class[i].focus();
            }
            return false;
          }
        };
        document.getElementById(show_password_id).onmouseup = function () {
          for (var i = 0; i <= get_class.length - 1; i++) {
            get_class[i].type = 'password';
            if (document.activeElement && document.activeElement != get_class[i]) {
              get_class[i].focus();
            }
            return false;
          }
        };
        document.onmouseup = function () {
          for (var q = 0; q < shp_f_input_class.length; q++) {
            var elements = document.getElementsByClassName(shp_f_input_class[q]);
            for (var i = 0, length = elements.length; i < length; i++) {
              elements[i].type = 'password';
            }
          }
        };
      } else {
        document.getElementById(show_password_id).onmousedown = if_not_focused;
        document.getElementById(show_password_id).onclick = function () {
          for (var i = 0; i <= get_class.length - 1; i++) {
            get_class[i].type && (get_class[i].type.toLowerCase() == 'password' ? (get_class[i].type = 'text') : (get_class[i].type = 'password'));
            return false;
          }
        };
        document.getElementById(show_password_id).onmouseup = if_not_focused;
      }
    },
    generate: function (add_letter) {
      var charachters = 'abcdefghijklmnopqrstuvwxyz_',
        m = '';
      var rand_split = charachters.split('');
      var rand_number = Math.round(Math.random() * 20);
      while (rand_number < 12) {
        rand_number = rand_number + Math.round(Math.random() * 6);
      }
      for (var i = 0; i <= rand_number; i++) {
        var rand_number2 = Math.round(Math.random() * (charachters.length - 1));
        m = m + rand_split[rand_number2];
      }
      return m;
    },
    add_top: function (height) {
      var new_add_top = 0;
      if (height <= 18) {
        new_add_top = 13;
      } else if (height >= 19 && height <= 22) {
        new_add_top = 17;
      } else if (height >= 23 && height <= 28) {
        new_add_top = 21;
      } else if (height >= 29 && height <= 36) {
        new_add_top = 22;
      } else {
        new_add_top = 24;
      }
      return new_add_top;
    },
    evenodd: function (number) {
      if ((number % 2 == 0) == false) {
        return number + 1;
      } else {
        return number;
      }
    },
    create_new_style: function (object, left, top, width, height, margin_top, background_size, z_index) {
      document.getElementById(object + 's').innerText = '#' + object + '{top:' + top + 'px !important; left:' + left + 'px !important; height:' + height + 'px !important; margin-left:' + (width - (width > 300 ? 30 : 24)) + 'px !important;margin-top:' + margin_top + 'px !important;' + background_size + 'z-index:' + z_index + ' !important }';
    },
    onresize_new_style: function () {
      for (var i = 0; i < shp_f_input_class.length; i++) {
        var onresize_getclass = document.getElementsByClassName(shp_f_input_class[i]);
        for (var ia = 0; ia < onresize_getclass.length; ia++) {
          var onresize_position = shp_f.position(onresize_getclass[ia]),
            width, height;
          width = onresize_getclass[ia].offsetWidth;
          height = onresize_getclass[ia].offsetHeight;
          var new_height_onresize = shp_f.add_top(height);
          var background_size_onresize = onresize_getclass[ia].offsetHeight < 14 ? 'background-size: 14px !important' : '';
          var onresize_margin_top = (shp_f.evenodd(onresize_getclass[ia].offsetHeight - shp_f.add_top(onresize_getclass[ia].offsetHeight))) / 2;
          var get_z_index_a = shp_f.get_style(onresize_getclass[ia], 'z-index');
          var get_position = shp_f.get_style(onresize_getclass[ia], 'position');
          var z_index_onresize;
          if (get_position != 'static') {
            if (get_z_index_a == 'auto') {
              z_index_onresize = 'auto';
            } else {
              z_index_onresize = parseInt(get_z_index_a) + 1;
            }
          } else {
            z_index_onresize = '999999';
          }
          shp_f.create_new_style(shp_f_input_id[i], onresize_position.position_left, onresize_position.position_top, width, new_height_onresize, onresize_margin_top, background_size_onresize, z_index_onresize);
        }
      }
      if (location.href.match('pinterest.com/join/register/email/')) {
        document.getElementById(shp_f_input_id[0]).setAttribute('style', 'top: 210px !important');
      }
    },
    check_if_new: function () {
        var i = 0;
        var rem_by_id;
        shp_f.ib = 0;
        shp_f_input_position_new = [];
        shp_f.input_length = document.getElementsByTagName('input'); /*check if any input is deleted*/
        for (i = 0; i <= shp_f_input_class.length - 1; i++) {
          if (!document.getElementsByClassName(shp_f_input_class[i])[0]) {
            rem_by_id = document.getElementById(shp_f_input_id[i]);
            if (rem_by_id) {
              rem_by_id.parentElement.removeChild(rem_by_id);
            }
            shp_f_input_id.splice([i], 1);
            shp_f_input_class.splice([i], 1);
          }
        }
        for (i = 0; i <= shp_f.input_length.length - 1; i++) {
          if (document.getElementsByTagName('input')[i].getAttribute('type') && document.getElementsByTag…












#Start 2nd


var vArgs = fGetArgs();			// query string parameters (first, last, hier, and mgtlevel)

// methods/properties for running an online course
var gOnlineCourse = new cOnlineCourseObject();
var vCurrentState="ready";		// current event state
var gBackStack=new Array();		// where to go back to 
var vPg="";
var vsNSC = 'LMSV2';
var vWarning = '';
var vShowAckCheckbox = '';
var vPostTestDate = '';   // non-blank if course is a post test
var vHTML5 = "1";           // referenced in scoBuffer.js
var vArticulate = "0"; // referenced in scoBuffer.js
var vQRCode = "";

function fOnload() {
    var vPopupHTML;

	// Initialize basic stuff
	fInitBrowserFlags();
	fOnloadXOut();
	//fCalcLayout();    
	fShow("containerDiv");
	//alert(vArgs["pg"]);
	//gBackStack[0] = "window.location = '"+unescape(vArgs["pg"])+"';";
	if (typeof vArgs["pg"] == "undefined") {
		gBackStack[0] = "window.close();";
	} else {
		//gBackStack[0] = "top.location.replace('"+unescape(vArgs["pg"])+"');";
		gBackStack[0] = "window.close();";
		var vtmp = unescape(vArgs["pg"]).split("?");
		vPg = vtmp[0].toLowerCase();
    }
    if (typeof vArgs["qrcode"] != "undefined") {
        // if qrcode is set it contains a local course code; when user closes course navigate back to login page with 'olt' parameter
        vQRCode = vArgs["qrcode"];
    }
	document.title = unescape(vArgs["t"]);
	if (vWarning != "") {
	    var h = $(document).height();
	    var w = $("body").width();
	    var wDlg = 748;
	    var hDlg = 452;
        if (isMobile) {
            $("body").addClass("mobile");
            vPopupHTML = "<div id='SpecialPopup' name='SpecialPopup' style='background-color:#fff;  position:absolute; top:0px; left:0px; width:100%; height:auto; z-index:2000; ' >\n\
                         </div>";
        } else {
    	    vPopupHTML = "<div id='SpecialPopup' name='SpecialPopup' style='background-color:#fff;  position:absolute; top:" + Math.floor((h - hDlg) / 2) + "px; left:" + Math.floor((w - wDlg) / 2) + "px; width:"+wDlg+"px; height:"+hDlg+"px; z-index:2000; ' >\n\
                         </div>";
        }
	    $("body").append(vPopupHTML);
        var vBrandWarning = (vWarning == "N") ? "#NissanWarning" : "#InfinitiWarning";
        var vAckCheckboxOn = vShowAckCheckbox == "Y" ? "ackCheckboxOn" : "";
        $("#SpecialPopup").addClass(vAckCheckboxOn).load("OLTWarning.html " + vBrandWarning);
	} else {
	    fLaunchCourse();
	}
}

function fLaunchPreflight() {
	var h = $(document).height();
	var w = $("body").width();
	var wDlg = 324;
	var hDlg = 330;
	var autoplay = false;
	if (w < 1000) w = 1000;
    var vPopupHTML = "<div id='tmpTintedGlass' style='position:absolute; left:0px; top:0px; width:" + w + "px; height:" + h + "px; z-index:1001; background-color:#AAAAAA; '></div><div id='SpecialPopup' name='SpecialPopup' style='background-color:#AAAAAA; cursor:pointer; position:absolute; top:" + Math.floor((h - hDlg) / 2) + "px; left:" + Math.floor((w - wDlg) / 2) + "px; width:"+wDlg+"px; height:"+hDlg+"px; z-index:2000;'><img src='images/launch_course.png' /><audio id='audioPreflight' autoplay src='blank.mp3' type='audio/mpeg'></div>";
	$("body").append(vPopupHTML);
	var audio = document.getElementById("audioPreflight");
	audio.onplay = function() {
	    autoplay = true;		
		$("#tmpTintedGlass").remove();
		$("#SpecialPopup").remove();
		gOnlineCourse.Start(vArgs["c"], vArgs["t"], vArgs["b"]);	
	}
	audio.onended = function () {
		$("#tmpTintedGlass").remove();
		$("#SpecialPopup").remove();
		gOnlineCourse.Start(vArgs["c"], vArgs["t"], vArgs["b"]);			
	}   	
	$("#SpecialPopup").on("click", function(){
	    audio.play(); 
	});
}

function fLaunchCourse() {
    if (vPostTestDate == "") {
	   if (bowser.name.toLowerCase() == "chrome") {
	      //Show an audio click to satisfy engagement.
		  fLaunchPreflight();  
		  
	   } else {
	     gOnlineCourse.Start(vArgs["c"], vArgs["t"], vArgs["b"]);		
	   }
    } else {
        switch(vPostTestDate) {
            case "TBD":
                alert('Main course not passed.');
                break;
            default:
                var vFormatStr = 'Please return on or after ##00 to take this test.';
                vFormatStr = vFormatStr.replace(/##00/, vPostTestDate);
                alert(vFormatStr);
                break;
        }
        window.close();
    }
}

function OLTDialogContinue() {
    // If acknowledge checkbox is shown it must be checked before dismissing the dialog
    if (vShowAckCheckbox == "Y") {
        if ($("#NissanAckCheckbox").is(":not(:checked)")) {
            return;
        }
    }
    $("#tmpTintedGlass").remove();
    $("#SpecialPopup").remove();
    fLaunchCourse();
}

function OLTDialogCancel() {
    window.close();
}

function fCalcLayout() {
	var vObj, vX, j;
	var vTopDivH;
	/*
	// Calculate dimensions and positions for the top, bottom, and content areas. Set values and then show.
	var vWidth = 1018;	//1016; //fGetObjectWidth("containerDiv"); // fGetInsideWindowWidth();
	var vHeight = fGetInsideWindowHeight();	 //656;	// 670;	//fGetObjectHeight("containerDiv"); // fGetInsideWindowHeight();
	if (vHeight < 656) vHeight = 656;

	// set height of course map to total height minus bottom menu height
	vObj = fGetObject("courseMap");
	vObj.height = vHeight + "px";
	vObj = fGetObject("onlineCourse");
	vObj.height = vHeight + "px";
	fCenterContent();
    */
}

function fConfirmXOut(event) {
	if (xout && typeof vArgs["pg"] != "undefined") {
		var e = (event || window.event);
		/*if (e.returnValue) {
			e.returnValue = "YOU WILL BE LOGGED OUT OF VIRTUAL ACADEMY.\nUNSAVED WORK WILL BE LOST.\n\nPlease use the Exit and/or Save buttons provided.";
		} */
		var vCourseWin = fGetObject("onlineCourse");
		if (vCourseWin) {
			if (vCourseWin.visibility == "visible") {
				if (e.preventDefault) {
					if (!confirm("UNSAVED WORK WILL BE LOST!\n\nTo save your work click Cancel below and then use the Exit and/or Save buttons provided.")) {
						e.preventDefault();
						e.stopPropagation();
					}
				} else {
					e.returnValue = "UNSAVED WORK WILL BE LOST!\n\nPlease use the Exit and/or Save buttons provided.";
				}
			}
		}
	}
}

function fCenterContent() {
	var vX = (fGetInsideWindowWidth() - fGetObjectWidth("containerDiv"))/2; 
	var vY = 0;	//(fGetInsideWindowHeight() - fGetObjectHeight("containerDiv"))/2;
	if (vX < 0) vX = 0;
	fShiftTo("containerDiv", vX, vY);	
}

function fResized() {
	//fCalcLayout();
}

function fCourseMapURL() {
    
            return "../OnlineCourse/coursemap.asp";
    
}

function fOnUnload() {
    try{
        if (opener.top.location.href.toLowerCase().indexOf("/main/main.asp") < 0) {
            // For VA2 & VA3 (non Catalog/Admin views) simply reload the opener page to refresh status
            if (opener.location.href.toLowerCase().indexOf(vPg)>0) opener.location.reload();
        }
    }catch(er){
    };
}

function fQRCodeLogout() {
    $.ajax({
        type: "POST",
        cache: false,
        url: "/Main/logout.asp",
        success: function () {
            $.ajax({
                type: "POST",
                cache: false,
                url: "/VA3/DB/SessionEnd.aspx",
                success: function () {
                    location.replace("/main/login.asp?olt=" + vQRCode);
                }
            });
        }
    });
}


#Start chrome.js

var debug = false;
var debug2 = false;

// Setting isTranslated to true will display the language button
var isTranslated = true;
// Setting hasResources to true will display the resources button
var hasResources = false;

var vLocation = "";
var vSuspendData = "";
var SuspendArray = new Array();
var vStatus = "";
var vLanguage = "";
var inClick = false;
var jsPath = "menu.js";
var jsPath_es = "menu_es.js";
var menunav = "";
var currentContentFile;
var helpToLoad;
var contentLoader = new Loader();
var helpLoader = new Loader();
var helpOn = false;
var menuOn = false;
var menuCloseTimeout;
var captionOn = false;
var resourcesOn = false;
var menuBuilt = false;
var mouseoverPlayPause = false;
var currentContent;
var currentModulenum;
var currentScreennum;
var contentDummy;
var helpDummy;
var contentLoaded;

var menuHolder;
var menuItemCount = 0;

var currentModIndex = 0;
var currentScreenIndex = 1;
var highestModIndex = 2;
var highestScreenIndex = 3;

var stepHT = new Object;

var js;

var btnNextEnabled = false;
var btnBackEnabled = false;
var btnPlayEnabled = true;
var btnPauseEnabled = true;
var vLocationArray = new Array();
var stepArray = new Array();
var stepArrayCurrIndex = 0;
var propArray = new Array();
var sectionCount = 1;
var pageCount = 1;
var highestPlayed = -1;
var page = new Number;
var pageTot = new Number;

var btn_back;
var btn_next;
var btn_restart;
var btn_pause;
var exit_btn;
var help_btn;
var init_btn;
var menu_btn;
var caption_btn;
var captionclose_btn;
var resources_btn;
var resourcesclose_btn;
var language_btn;
var menuToggle;

var vAlert;
var vdLocation;
var vdStatus;
var indicator;
var section_title;
var videoPlayer;
var videoPlayerInteracted = false;

function get_debug() {
    return debug;
}
// Initialize all
$(document).ready(function () {
    initializePage();
    initializeLMS();
    var loader = new URLLoader();
    if (vLanguage == "Spanish") {
        loader.load(jsPath_es);
    } else {
        loader.load(jsPath);
    }
    initPlayhead();
    initExitHelp();
});

function initializePage() {
    //trace("initializePage");
    videoPlayer = $("#videoPlayer");
    course_title = $("#coursetitle");
    btn_back = $("#prevbutton");
    btn_next = $("#nextbutton");
    btn_restart = $("#replaybutton");
    btn_pause = $("#pausebutton");
    exit_btn = $("#exitbutton");
    menu_btn = $("#menubutton");
    caption_btn = $("#captionbutton");
    captionclose_btn = $("#captionclosebutton");
    resources_btn = $("#resourcesbutton");
    resourcesclose_btn = $("#resourcesclosebutton");
    language_btn = $("#languagebutton");
    init_btn = $("#initbutton");
    vAlert = $("#valert");
    vdLocation = $("#vdlocation");
    vdStatus = $("#vdstatus");
    indicator = $("#indicator");
    section_title = $("#sectiontitle");
    if (isTranslated == false) {
        language_btn.css("display", "none");
    }
    if (hasResources == false) {
        resources_btn.css("display", "none");
    }
}

function fileLoaded() {
    //trace("fileLoaded");
    if (!menuBuilt) {
        menuInit();
        menuBuilt = true;
    }
}

function Loader() {

    this.load = fload;

    function fload(url) {
        //trace("load");
        var el = document.getElementById('content_iframe');
        if (vLanguage == "Spanish") {
            el.src = "content_es/" + url;
        } else {
            el.src = "content/" + url;
        }
        fileLoaded();
    }
}

function URLLoader() {

    this.load = loadData;

    function loadData(path) {
        //trace("loadData");
        if (vLanguage == "Spanish") {
            js = getMenu_es();
        } else {
            js = getMenu();
        }
        //trace(js);
        //debug = js.debug;
        //debug2 = js.debug2;
        if (debug2) {
            addEventHandler(init_btn[0], "mousedown", initClick);
            init_btn.css("display", "block");
        }
        jsLoaded();
    }
}

function addEventHandler(elem, eventType, handler) {
    //trace("addEventHandler");
    if (elem.addEventListener)
        elem.addEventListener(eventType, handler, false);
    else if (elem.attachEvent)
        elem.attachEvent('on' + eventType, handler);
}

function gotoAndStop(elem, state) {
    var id = elem.attr('id');
    //trace("gotoAndStop: " + id + " " + state);
    elem.removeClass(id + "gray");
    elem.removeClass(id + "disabled");
    elem.removeClass(id + "enabled");
    elem.removeClass(id + "rollover");
    elem.removeClass(id + "disabledrollover");
    elem.addClass(id + state);
}

function initPlayhead() {
    //trace("initPlayhead");
    // Set up restart button
    gotoAndStop(btn_restart, "enabled");
    addEventHandler(btn_restart[0], "mousedown", btn_restartClick);
    addEventHandler(btn_restart[0], "mouseover", restartmouseOverPlayhead);
    addEventHandler(btn_restart[0], "mouseout", restartmouseOutPlayhead);
    // Set up back button
    addEventHandler(btn_back[0], "mousedown", btn_backClick);
    addEventHandler(btn_back[0], "mouseover", backmouseOverPlayhead);
    addEventHandler(btn_back[0], "mouseout", backmouseOutPlayhead);
    // Set up next button
    addEventHandler(btn_next[0], "mousedown", btn_nextClick);
    addEventHandler(btn_next[0], "mouseover", nextmouseOverPlayhead);
    addEventHandler(btn_next[0], "mouseout", nextmouseOutPlayhead);
    // Set up pause button
    gotoAndStop(btn_pause, "enabled");
    addEventHandler(btn_pause[0], "mousedown", btn_pauseClick);
    addEventHandler(btn_pause[0], "mouseover", pausemouseOverPlayhead);
    addEventHandler(btn_pause[0], "mouseout", pausemouseOutPlayhead);
}

function initExitHelp() {
    //trace("initExitHelp");
    gotoAndStop(exit_btn, "enabled");
    //gotoAndStop(help_btn, "enabled");
    gotoAndStop(menu_btn, "enabled");
    gotoAndStop(caption_btn, "enabled");
    gotoAndStop(captionclose_btn, "enabled");
    gotoAndStop(resources_btn, "enabled");
    gotoAndStop(resourcesclose_btn, "enabled");

    if (isTranslated == true) {
        gotoAndStop(language_btn, "enabled");
        addEventHandler(language_btn[0], "mouseover", languageMouseOver);
        addEventHandler(language_btn[0], "mouseout", languageMouseOut);
        addEventHandler(language_btn[0], "mousedown", languageClick);
    }

    addEventHandler(exit_btn[0], "mouseover", exitMouseOver);
    addEventHandler(exit_btn[0], "mouseout", exitMouseOut);
    addEventHandler(exit_btn[0], "mousedown", exitClick);
    //addEventHandler(help_btn[0], "mouseover", helpMouseOver);
    //addEventHandler(help_btn[0], "mouseout", helpMouseOut);
    //addEventHandler(help_btn[0], "mousedown", helpClick);
    addEventHandler(caption_btn[0], "mouseover", captionMouseOver);
    addEventHandler(caption_btn[0], "mouseout", captionMouseOut);
    addEventHandler(caption_btn[0], "mousedown", captionClick);
    addEventHandler(resources_btn[0], "mouseover", resourcesMouseOver);
    addEventHandler(resources_btn[0], "mouseout", resourcesMouseOut);
    addEventHandler(resources_btn[0], "mousedown", resourcesClick);
    addEventHandler(captionclose_btn[0], "mousedown", captionClick);
    addEventHandler(resourcesclose_btn[0], "mousedown", resourcesClick);
}

function exitMouseOver(e) {
    //trace("exitMouseOver");
    gotoAndStop(exit_btn, "rollover");
}

function helpMouseOut(e) {
    //trace("helpMouseOut");
    gotoAndStop(help_btn, "enabled");
}

function helpMouseOver(e) {
    //trace("helpMouseOver");
    gotoAndStop(help_btn, "rollover");
}

function captionMouseOut(e) {
    //trace("captionMouseOut");
    gotoAndStop(caption_btn, "enabled");
}

function captionMouseOver(e) {
    //trace("captionMouseOver");
    gotoAndStop(caption_btn, "rollover");
}

function resourcesMouseOut(e) {
    //trace("resourcesMouseOut");
    gotoAndStop(resources_btn, "enabled");
}

function resourcesMouseOver(e) {
    //trace("resourcesMouseOver");
    gotoAndStop(resources_btn, "rollover");
}

function languageMouseOut(e) {
    //trace("resourcesMouseOut");
    gotoAndStop(language_btn, "enabled");
}

function languageMouseOver(e) {
    //trace("captionMouseOver");
    gotoAndStop(language_btn, "rollover");
}

function menuMouseOut(e) {
    //trace("menuMouseOut");
    gotoAndStop(menu_btn, "enabled");
}

function menuMouseOver(e) {
    //trace("menuMouseOver");
    gotoAndStop(menu_btn, "rollover");
}

function exitMouseOut(e) {
    //trace("exitMouseOut");
    gotoAndStop(exit_btn, "enabled");
}

function helpClick(e) {
    //trace("helpClick");
    if (!helpOn) {
        helpOn = true;
        var el = document.getElementById('help-iframe');
        if (vLanguage == "Spanish") {
            el.src = "content_es/" + js.helpContent;
        } else {
            el.src = "content/" + js.helpContent;
        }
        $("#help-overlay").css("display", "block");
    } else {
        helpOn = false;
        var el = document.getElementById('help-iframe');
        if (vLanguage == "Spanish") {
            el.src = "content_es/" + "blank.html";
        } else {
            el.src = "content/" + "blank.html";
        }
        $("#help-overlay").css("display", "none");
    }
}

function menuClick(e) {
    //trace("menuClick");
    if (!menuOn) {
        menuOn = true;
        $("#menu-overlay").css("display", "block");
        setMenuOffset(stepArrayCurrIndex);
    } else {
        menuOn = false;
        $("#menu-overlay").css("display", "none");
    }
}

function menuOverlayOver(e) {
    clearTimeout(menuCloseTimeout);
}

function menuOverlayOut(e) {
    if (menuOn) {
        menuCloseTimeout = setTimeout(
            function () {
                menuOn = false;
                $("#menu-overlay").css("display", "none");
            }, 1000);
    }
}

function captionClick(e) {
    //trace("captionClick");
    if (!captionOn) {
        captionOn = true;
        $("#caption-overlay").css("display", "block");
    } else {
        captionOn = false;
        $("#caption-overlay").css("display", "none");
    }
}

function resourcesClick(e) {
    //trace("resourcesClick");
    if (!resourcesOn) {
        resourcesOn = true;
        $("#resources-overlay").css("display", "block");
    } else {
        resourcesOn = false;
        $("#resources-overlay").css("display", "none");
    }
}

function setNavButtons() {
    if (vLanguage == "Spanish") {
        $("#indicator_exit").html("Guardar y Salir");
        if (isTranslated == true) {
            $("#indicator_language").html("English");
        }
        $("#indicator_menu").html("Menú");
        $("#indicator_back").html("Atrás");
        $("#indicator_pause").html("Reproducir/Pausa");
        $("#indicator_replay").html("Repetir");
        $("#indicator_next").html("Siguiente");
    } else {
        $("#indicator_exit").html("SAVE &amp; EXIT");
        if (isTranslated == true) {
            $("#indicator_language").html("ESPAÑOL");
        }
        $("#indicator_menu").html("MENU");
        $("#indicator_back").html("BACK");
        $("#indicator_pause").html("PLAY/PAUSE");
        $("#indicator_replay").html("REPLAY");
        $("#indicator_next").html("NEXT");
    }
}

function languageClick(e) {
    //trace("languageClick");
    if (!inClick) {
        inClick = true;
        videoPlayer.unbind();
        if (vLanguage == "Spanish") {
            vLanguage = "English";
            js = getMenu();
        } else {
            vLanguage = "Spanish";
            js = getMenu_es();
        }
        createMenu();
        //save module language string
        jscommand("LMSSaveLanguage", vLanguage);
        setNavButtons();
        goToCurrentModule();
        inClick = false;
    }
}

function setLanguageClick(e) {
    //trace("languageClick");
    if (!inClick) {
        inClick = true;
        videoPlayer.unbind();
        if (vLanguage == "Spanish") {
            js = getMenu_es();
        } else {
            js = getMenu();
        }
        createMenu();
        //save module language string
        jscommand("LMSSaveLanguage", vLanguage);
        setNavButtons();
        goToCurrentModule();
        inClick = false;
    }
}

function exitClick(e) {
    var answerprompt = "Do you want to exit the course?";
    if (vLanguage == "Spanish") {
        answerprompt = "¿Quieres salir del curso?";
    }
    var answer = confirm(answerprompt);
    if (answer == false) {
        return;
    }
    //trace("exitClick");
    vLocation = vLocationArray.join(",");
    jscommand("LMSSaveLocation", vLocation);
    //save module status string
    //vSuspendData = SuspendArray.join(",");
    jscommand("LMSSaveModStatus", vSuspendData);
    //should exit command for LMS
    jscommand("LMSSetExit", "logout");
    //should finish command for LMS
    jscommand("LMSFinish");
}

function initClick(e) {
    //trace("initClick");
    vLocation = "1,1,0,0";
    jscommand("LMSSaveLocation", vLocation);
    //save module status string
    //vSuspendData = SuspendArray.join(",");
    jscommand("LMSSaveModStatus", vSuspendData);
    //should exit command for LMS
    jscommand("LMSSetExit", "logout");
    //should finish command for LMS
    jscommand("LMSFinish");
}

function backmouseOverPlayhead() {
    //trace("backmouseOverPlayhead");
    if (btnBackEnabled) {
        gotoAndStop(btn_back, "rollover");
    }
}

function backmouseOutPlayhead() {
    //trace("backmouseOutPlayhead");
    if (btnBackEnabled) {
        gotoAndStop(btn_back, "enabled");
    } else {
        gotoAndStop(btn_back, "disabled");
    }
}

function restartmouseOverPlayhead() {
    //trace("restartmouseOverPlayhead");
    gotoAndStop(btn_restart, "rollover");
}

function restartmouseOutPlayhead() {
    //trace("restartmouseOutPlayhead");
    mouseoverPlayPause = false;
    gotoAndStop(btn_restart, "enabled");
}

function nextmouseOverPlayhead() {
    //trace("nextmouseOverPlayhead");
    if (btnNextEnabled) {
        gotoAndStop(btn_next, "rollover");
    }
}

function nextmouseOutPlayhead() {
    //trace("nextmouseOutPlayhead");
    mouseoverPlayPause = false;
    if (btnNextEnabled) {
        gotoAndStop(btn_next, "enabled");
    } else {
        gotoAndStop(btn_next, "disabled");
    }
}

function btn_backClick() {
    //trace("btn_backClick");
    if (!inClick) {
        inClick = true;
        if (btnBackEnabled) {
            if (stepArrayCurrIndex > 0) {
                stepArrayCurrIndex--;
                setBookmark(propArray[stepArrayCurrIndex][1], propArray[stepArrayCurrIndex][2]);
                videoPlayer.unbind();
                goToCurrentModule();
                saveLocation();
                closeMedia();
            }
        }
        inClick = false;
    }
}

function btn_restartClick() {
    //trace("btn_restartClick");
    if (!inClick) {
        inClick = true;
        videoPlayer.unbind();
        goToCurrentModule();
        inClick = false;
    }
}

function btn_nextClick() {
    //trace("btn_nextClick");
    if (!inClick) {
        inClick = true;
        if (btnNextEnabled) {
            if (stepArrayCurrIndex < stepArray.length - 1) {
                videoPlayer[0].pause();
                videoPlayer.unbind();
                closeMedia();
                stepArrayCurrIndex++;
                setBookmark(propArray[stepArrayCurrIndex][1], propArray[stepArrayCurrIndex][2]);
                goToCurrentModule();
                saveLocation();
            }
        }
        inClick = false;
    }
}

function pausemouseOverPlayhead() {
    //trace("nextmouseOverPlayhead");
    if (btnPauseEnabled) {
        gotoAndStop(btn_pause, "rollover");
    } else {
        gotoAndStop(btn_pause, "disabledrollover");
    }
}

function pausemouseOutPlayhead() {
    //trace("nextmouseOutPlayhead");
    //mouseoverPlayPause = false;
    if (btnPauseEnabled) {
        gotoAndStop(btn_pause, "enabled");
    } else {
        gotoAndStop(btn_pause, "disabled");
    }
}

var pausedVideos = [];

function btn_pauseClick() {
    var frmx = document.getElementById("content_iframe");
    var frmy = (frmx.contentWindow || frmx.contentDocument);
    if (!inClick) {
        inClick = true;

        if (btnPauseEnabled) {
            pausedVideos = [];
            //alert("btn_pauseClick");
            videoPlayer[0].pause(true);
            if (frmy.$('video').length > 0) {
                for (var i = 0; i < frmy.$('video').length; i++) {
                    if (!frmy.$('video')[i].paused) {
                        pausedVideos.push(frmy.$('video')[i]);
                        frmy.$('video')[i].pause(true);
                    }
                }
            }

            btnPauseEnabled = false;
            gotoAndStop(btn_pause, "disabledrollover");
        } else {
            videoPlayer[0].play(true);
            if (pausedVideos.length > 0) {
                for (var i = 0; i < pausedVideos.length; i++) {
                    pausedVideos[i].play();
                }
            }
            pausedVideos = [];

            btnPauseEnabled = true;
            gotoAndStop(btn_pause, "rollover");
        }
        inClick = false;
    }
}

function saveLocation() {
    vLocation = vLocationArray.join(",");
    jscommand("LMSSaveLocation", vLocation);
    jscommand("LMSCommit");
}

function jsLoaded() {
    //trace("jsLoaded");
    //initializeLMS();
    createMenu();
}

function fEnableNext() {
    //trace("fEnableNext");
    setCurrentAsHighest();
    enableNext();
    saveLocation();
}

function fAdvanceNext() {
    //trace("fAdvanceNext");
    setCurrentAsHighest();
    enableNext();
    saveLocation();
    btn_nextClick();
}

function initializeLMS() {
    jscommand("LMSInit");
    vSuspendData = fGetModStatus();
    //SuspendArray = vSuspendData.split(",");
    vLocation = fGetLocation();
    vStatus = fGetStatus();
    vLanguage = fGetLanguage();
    //alert("Language: "+vLanguage);
    getBookmark();
}

function enableAllMenuItems() {
    //trace("enableAllMenuItems");
    for (var index = highestPlayed; index <= stepArray.length - 1; index++) {
        if ($('#module-' + index).hasClass("module-disabled")) {
            $('#module-' + index).removeClass("module-disabled").addClass("module-enabled");
        }
    }
    updateNavigation();
}

function createMenu() {
    stepArray.length = 0;
    propArray.length = 0;
    //trace("createMenu");
    course_title.html(js.title);
    sectionCount = 1;
    pageCount = 1;
    var index = 0;
    menunav = "<ul id='nav-menu' class='nav-menu'>";
    //Loop through all the <section></section> nodes in the JSON
    for (var i = 0; i < js.items.section.length; i++) {
        var section = js.items.section[i];
        var sLabel = section.label;
        if (sLabel != null) {
            menunav += "<li><a id='section-" + index + "' class='section-enabled'>" + sLabel + "</a></li>";
            menuItemCount++;
        }
        for (var k = 0; k < section.ytem.length; k++) {
            var itm = section.ytem[k];
            itm.y = menuItemCount * 27 + ((menuItemCount - 1) * 1);
            stepArray.push(itm.linkTo);
            propArray.push([itm.linkTo, sectionCount, pageCount, itm, section]);
            stepHT[sectionCount + "," + pageCount] = index;
            if (vStatus == "passed") {
                menunav += "<li><a id='module-" + index + "' class='module-enabled' onclick='itemClicked(" + index + ");return false;' href='#'><span id='span-" + index + "' class='menu-item noncurrent' width=16></span>" + itm.label + "</a></li>";
            } else if ((sectionCount < vLocationArray[highestModIndex]) || (pageCount <= vLocationArray[highestScreenIndex] && sectionCount == vLocationArray[highestModIndex])) {
                menunav += "<li><a id='module-" + index + "' class='module-enabled' onclick='itemClicked(" + index + ");return false;' href='#'><span id='span-" + index + "' class='menu-item noncurrent' width=16></span>" + itm.label + "</a></li>";
            } else {
                menunav += "<li><a id='module-" + index + "' class='module-disabled' onclick='itemClicked(" + index + ");return false;' href='#'><span id='span-" + index + "' class='menu-item noncurrent' width=16></span>" + itm.label + "</a></li>";
            }
            menuItemCount++;
            pageCount++;
            index++;
        }
        sectionCount++;
        pageCount = 1;
    }
    menunav += "</ul>";
    var mn = $("#menu-nav");
    mn.html(menunav);
    var height = mn.height();
    var scrollHeight = propArray[propArray.length - 1][3].y;
    if (scrollHeight <= height)
        mn.css("overflow-y", "hidden");
    setNavButtons();
    var fileToLoad = js.items.section[vLocationArray[currentModIndex] - 1].ytem[vLocationArray[currentScreenIndex] - 1].linkTo;
    currentContentFile = fileToLoad;
    contentLoader.load(fileToLoad);
    initHighestPlayed();
    initCurrentIndex();
    updateNavigation();
    updatePageReadout();
}

function updatePageReadout() {
    //trace("updatePageReadout");
    btnPauseEnabled = true;
    gotoAndStop(btn_pause, "enabled");
}

function initHighestPlayed() {
    //trace("initHighestPlayed");
    if (vLocationArray[highestModIndex] == 0 || vLocationArray[highestScreenIndex] == 0) {
        highestPlayed = -1;
        return;
    }
    highestPlayed = stepHT[vLocationArray[highestModIndex] + "," + vLocationArray[highestScreenIndex]];
}

function initCurrentIndex() {
    stepArrayCurrIndex = stepHT[vLocationArray[currentModIndex] + "," + vLocationArray[currentScreenIndex]];
}

//This function is called when a menu item is clicked
function itemClicked(index) {
    //trace("itemClicked");
    if (!inClick) {
        inClick = true;
        if ($('#module-' + index).hasClass("module-enabled")) {
            videoPlayer.unbind();
            stepArrayCurrIndex = index;
            setBookmark(propArray[stepArrayCurrIndex][1], propArray[stepArrayCurrIndex][2]);
            goToCurrentModule();
            saveLocation();
        }
        inClick = false;
    }
}

function setMenuOffset(index) {
    return;
}

function updateNavigation() {
    //trace("updateNavigation");

    for (var index = 0; index <= stepArray.length - 1; index++) {
        //$('#span-' + index).removeClass("current").addClass("noncurrent");
        $('#module-' + index).removeClass("module-current").addClass("module-noncurrent");
        if (index == stepArrayCurrIndex) {
            $('#module-' + index).addClass("module-current");
            //$('#span-' + index).addClass("current");
            if (index > highestPlayed) {
                $('#module-' + index).removeClass("module-disabled").addClass("module-enabled");
            }
            setMenuOffset(index);
        }
    }

    if (stepArrayCurrIndex == 0) {
        disableBack();
    } else {
        enableBack();
    }

    if (stepArrayCurrIndex == stepArray.length - 1) {
        disableNext();
    } else if (stepArrayCurrIndex < stepArray.length - 1) {
        if (stepArrayCurrIndex <= highestPlayed) {
            enableNext();
        } else if (stepArrayCurrIndex > highestPlayed) {
            if (vStatus == "passed") {
                enableNext();
            } else {
                disableNext();
            }
        }
    }
    var pA = propArray[stepArrayCurrIndex];
    var itm = pA[3];
    var section = pA[4];
    section_title.html(section.label + " — " + itm.label);
    //section_title.html(itm.label);
    //section_title.html(section.label);
    if (vLanguage == "Spanish") {
        indicator.html("Modulo " + vLocationArray[currentModIndex] + " — Pantalla " + vLocationArray[currentScreenIndex]);
    } else {
        indicator.html("Module " + vLocationArray[currentModIndex] + " — Screen " + vLocationArray[currentScreenIndex]);
    }
    displayClosedCaption();
    displayResources();
    if (debug2) {
        vdStatus.html(vStatus);
        vAlert.html(currentContentFile);
        vdLocation.html(vLocationArray.join(","));
    }
}


function displayClosedCaption() {
    var itm = propArray[stepArrayCurrIndex][3];
    if (typeof itm.CCtext !== 'undefined') {
        $('#caption-text').html(itm.CCtext);
    } else {
        $('#caption-text').empty();
    }
    if (vLanguage == "Spanish") {
        $('#caption-closetext').html("CERRAR");
    } else {
        $('#caption-closetext').html("CLOSE");
    }
}

function displayResources() {
    $('#resources-text').html(js.resourceText);
    if (vLanguage == "Spanish") {
        $('#resources-closetext').html("Cerrar");
    } else {
        $('#resources-closetext').html("CLOSE");
    }

    //js.helpContent
}

function goToCurrentModule() {
    //trace("goToCurrentModule");
    var module = stepArray[stepArrayCurrIndex];
    currentContentFile = module;
    contentLoader.load(module);
    updateNavigation();
    updatePageReadout();
}

function goToModule(index) {
    //trace("goToCurrentModule");
    if (index >= 0 && index <= stepArray.length - 1) {
        stepArrayCurrIndex = index;
    }
    goToCurrentModule();
}

function menuInit() {
    //trace("menuInit");
    addEventHandler(menu_btn[0], "mouseover", menuMouseOver);
    addEventHandler(menu_btn[0], "mouseout", menuMouseOut);
    addEventHandler(menu_btn[0], "mousedown", menuClick);
    addEventHandler($("#menu-overlay")[0], "mouseover", menuOverlayOver);
    addEventHandler($("#content")[0], "mouseover", menuOverlayOut);
    scrollbarInit();
}

function captionInit() {
    //trace("menuInit");
    //addEventHandler(menu_btn[0], "mouseover", menuMouseOver);
    //addEventHandler(menu_btn[0], "mouseout", menuMouseOut);
    addEventHandler(caption_btn[0], "mousedown", captionClick);
}

function resourcesInit() {
    //trace("menuInit");
    //addEventHandler(menu_btn[0], "mouseover", menuMouseOver);
    //addEventHandler(menu_btn[0], "mouseout", menuMouseOut);
    addEventHandler(resources_btn[0], "mousedown", resourcesClick);
}

function scrollbarInit() {
    //trace("scrollbarInit");
}

function fGetSuspendData() {
    //trace("fGetSuspendData");
    var suspendData = fGetModStatus();
    SuspendArray = suspendData.split(",");
    return (suspendData);
}

function fSaveSuspendData(suspendData) {
    //trace("suspendData");
    suspendData = SuspendArray.join(",");
    jscommand("LMSSaveModStatus", suspendData);
    jscommand("LMSCommit");
}

function fPassCourse() {
    //trace("fPassCourse");
    setCurrentAsHighest();
    saveLocation();
    vStatus = "passed";
    jscommand("LMSSetPassed");
    jscommand("LMSCommit");
    if (debug2) {
        vdStatus.html(vStatus);
    }
    enableAllMenuItems();
}

function getBookmark() {
    //trace("getBookmark");
    if ((vLocation == null) || (vLocation == "")) {
        vLocation = "1,1,0,0";
    }
    vLocationArray = vLocation.split(",");
    if (vStatus == "passed") {
        vLocationArray[currentModIndex] = 1;
        vLocationArray[currentScreenIndex] = 1;
    }
}

function setBookmark(sectionMark, pageMark) {
    //trace("setBookmark");
    vLocationArray[currentModIndex] = sectionMark;
    vLocationArray[currentScreenIndex] = pageMark;
    if (debug2) {
        vdLocation.html(vLocationArray.join(","));
    }
}

function setHighest(sectionHighest, pageHighest) {
    //trace("setHighest");
    vLocationArray[highestModIndex] = sectionHighest;
    vLocationArray[highestScreenIndex] = pageHighest;
    if (debug2) {
        vdLocation.html(vLocationArray.join(","));
    }
}

function setCurrentAsHighest() {
    if (stepArrayCurrIndex < stepArray.length && stepArrayCurrIndex > highestPlayed) {
        highestPlayed = stepArrayCurrIndex;
        setHighest(propArray[stepArrayCurrIndex][1], propArray[stepArrayCurrIndex][2]);
    }
}

function enableNext() {
    //trace("enableNext");
    if (stepArrayCurrIndex < stepArray.length - 1) {
      btnNextEnabled = true;
        gotoAndStop(btn_next, "enabled");
    }
}

function enableBack() {
    //trace("enableBack");
    if (stepArrayCurrIndex > 0) {
        btnBackEnabled = true;
        gotoAndStop(btn_back, "enabled");
    }
}

function disableNext() {
    //trace("disableNext");
    btnNextEnabled = false;
    gotoAndStop(btn_next, "disabled");
}

function disableBack() {
    //trace("disableBack");
    btnBackEnabled = false;
    gotoAndStop(btn_back, "disabled");
}

function getMediaPlayer() {
    return videoPlayer[0];
}

function playMedia(positionTop, positionLeft, width, height, url, poster, controls, isVideo) {
    videoPlayer
        .css("top", positionTop)
        .css("left", positionLeft)
        .css("width", width)
        .css("height", height)
        .attr("poster", poster)
        .find("source")
        .attr("src", window.location.pathname.substring(0, window.location.pathname.lastIndexOf("/")) + "/" + url)
        .attr("type", isVideo ? "video/mp4" : "audio/mpeg");

    if (controls) {
        videoPlayer.attr("controls", "");
    } else {
        videoPlayer.removeAttr("controls");
    }

    videoPlayer.show();
    videoPlayer[0].load();
    videoPlayer[0].play();
}

function stopMedia() {
    videoPlayer[0].pause(true);
    //alert('test');
}

function setPlayerListener(event, callback) {
    videoPlayer.bind(event, callback);
}

function setVideoControls(showControls) {
    if (showControls) {
        videoPlayer.attr("controls", "");
    } else {
        videoPlayer.removeAttr("controls");
    }
}

function closeMedia() {
    videoPlayer.hide();
}

$(function () {
    // This gets called when playing a video failed
    window.addEventListener(
        "unhandledrejection",
        function handleRejection(event) {
            event.preventDefault();
            console.log("Video error");

            if (!videoPlayerInteracted) {
                videoPlayerInteracted = true;
                // Show the play button and have it lock to the last player called
                $("#fakePlay").unbind().click(function () {
                    videoPlayer[0].play();
                    $(this).hide();
                }).show();
            }

        }
    );
});



// API


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

/**********************************************************************************
* lms_v2_scorm_api.asp?sco=x
*
*	sco (string): the SCOID of the SCO to load
*
* Web Page Content:
*	This page is the API wrapper for a SCORM compliant SCO. It displays an iframe
*	that contains the actual SCO. All the functions and variables needed by the 
*	SCO are defined in this page (and/or its included scripts).
*	This page also contains an invisible form and invisible iframe that are 
*	used to communicate with the server.
*
* Server-side tasks: 
*   Retrieve persons sco record for this SCO; write the values to hidden fields.
*				
* Client-side tasks: 
*	Initialize local SCO buffer with retrieved info. Then set SCO URL in iframe 
*	after the data is initialized.
*
*********************************************************************************/

<html>
<head>
<title>LMS V2 SCORM 1.2 API</title>
<META HTTP-EQUIV="Expires" CONTENT="0">
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-cache">
<script language="JavaScript" src="../include/common.js"></script>
<script language="JavaScript" src="scoBuffer.js?061422"></script>
<script language="JavaScript">

//	LMS V2 API for SCORM-compliant course vendors

var API = window;
var LMSReturnInteraction = 0; //simulator for the LMS-returned interaction count.
var LMSReturnObjective = 0; // simulator for the LMS-returned objective count.
var APIErrorCode = 0;
var LMSInitCalled = "false";
var LMSInitSuccessful = "false";
var LMSFinishCalled = "false";
var vFinishTimeoutID = -1;	// use when have to wait for commit request to return.
var vTargetLanguage = "en";
var vFullLogging  = (location.hostname.toLowerCase().indexOf("stage.") >= 0 || location.hostname.toLowerCase().indexOf("syssim.") >= 0);
var aProtectedCommands = ["cmi.suspend_data"];

var vArgs = fGetArgs();
var vSCOBuff = new cSCOBufferObj(vArgs["sco"], vArgs["retake"], vArgs["c"]);

function fAdvanceCourseMap() { }


//	LMSInitialize is called when the course first starts
function LMSInitialize(args)
	{
		if (LMSFinishCalled == "true") {
			return "false";
		}
		if (LMSInitCalled == "true") {
			APIErrorCode = 101;
			return "false";
		}
		if (args == "") {
			APIErrorCode = 0;
			LMSInitCalled = "true";
			LMSInitSuccessful = "true";
			//alert("Init");
			return "true";
		}
		if (args != "") {
			APIErrorCode = 201;
			LMSInitCalled = "true";
			return "false";
		}
	}	

//	LMSFinish is called when the course completes.
function LMSFinish(args)
	{
        try {
            console.log("LMSFinish");
        }
        catch (exception) {
        }
		if (vFinishTimeoutID != -1) {
			clearTimeout(vFinishTimeoutID);
			vFinishTimeoutID = -1;
		}
		vSCOBuff.CommitPending = false;	// No need for more commits if doing LMSFinish
		
		if (LMSFinishCalled == "true") {
			return "false";
		}
		if (LMSInitSuccessful != "true") {
			APIErrorCode = 301;
			return "false";
		}
		if (args == "") {
			// Safeguard: check that server is not still responding to last command before submitting
			// If still waiting for response, set timeout and try again.
			if (vSCOBuff.CurrentState == "ready") {
				APIErrorCode = 0;
				LMSFinishedCalled = "true";
				vSCOBuff.SaveToLMSDB("LMSFinish");
				return "true";
			} else {
				//APIErrorCode = 101;
				//return "false";
				window.focus();
				vFinishTimeoutID = setTimeout("LMSFinish('')", 500);
				return "true";
			}
		}
		if (args != "") {
			APIErrorCode = 201;
			LMSFinishedCalled = "true";
			return "false";
		}
	}
	
//	LMSCommit is called to send the current buffered data to the LMS.
function LMSCommit(args)
	{
        try {
            console.log("LMSCommit");
        }
        catch (exception) {
        }
		if (LMSFinishCalled == "true") {
			return "false";
		}
		if (LMSInitSuccessful != "true") {
			APIErrorCode = 301;
			return "false";
		}
		if (args == "") {
			// Safeguard:if server is still responding to last commit, set CommitPending flag to true
			// Always return true as long as args = ""
			if (vSCOBuff.CurrentState == "ready") {
				vSCOBuff.SaveToLMSDB("LMSCommit");
			} else {
				vSCOBuff.CommitPending = true;
			}
			APIErrorCode = 0;
			return "true";
		}
		if (args != "") {
			APIErrorCode = 201;
			return "false";
		}
	}

//	LMSGetLastError
function LMSGetLastError(args)
	{
		if (LMSFinishCalled == "true") {
			return "false";
		}
		return String(APIErrorCode);
	}

//	LMSGetErrorString. args = requested APIErrorCode.
function LMSGetErrorString(args)
	{
		if (LMSFinishCalled == "true") {
			return "false";
		}
		switch (args)
			{
				case "0" :
					return "No error";
					break;
				case "101" :
					return "General exception";
					break;
				case "201" :
					return "Invalid argument error";
					break;
				case "202" :
					return "Element cannot have children";
					break;
				case "203" :
					return "Element not an array - cannot have count";
					break;
				case "301" :
					return "Not initialized";
					break;
				case "401" :
					return "Not implemented error";
					break;
				case "402" :
					return "Invalid set value, element is a keyword";
					break;
				case "403" :
					return "Element is read only";
					break;
				case "404" :
					return "Element is write only";
					break;
				case "405" :
					return "Incorrect Data Type";
					break;
				default :
					return "Invalid argument error";
					break;
			}
	}

//	LMSGetDiagnostic
function LMSGetDiagnostic(args)
	{
		if (LMSFinishCalled == "true") {
			return "false";
		}
		if (args == "") {
			return "No LMS Diagnostic Information";
		} else {
			return "No LMS Diagnostic Information";
		}
	}

//  LMSSetValue is called by the course as required to pass status to the LMS	
function LMSSetValue(command, args)
	{
        try {
            // Only output to log if command is not protected or full logging is enabled
            if (vFullLogging) {
                console.log("LMSSetValue  command="+command+", args="+args);
            } else {
                if (aProtectedCommands.indexOf(command) === -1) {
                    console.log("LMSSetValue  command="+command+", args="+args);
                }
            }
        }
        catch (exception) {
        }

		if (LMSFinishCalled == "true") {
			return "false";
		}
		if (LMSInitSuccessful != "true") {
			APIErrorCode = 301;
			return "";
		}

		APIErrorCode = 0;

		switch (command) {
			// Receive course data.
			case "cmi.suspend_data" :
				return vSCOBuff.PersonSCO.SetSuspend(args);
				break;

			// Receive the course duration time in HH:MM:SS. Sent before LMSFinish.
			case "cmi.core.session_time" :
				return vSCOBuff.PersonSCO.SetSessionTime(args);
				break;

			// Receive the course score. Sent before LMSFinish. Usually sent as a percentage of the number correct.
			case "cmi.core.score.raw" :
				return vSCOBuff.PersonSCO.SetScoreRaw(args);
				break;

		    // Receive the max course score. Sent before LMSFinish. 
		    case "cmi.core.score.max" :
		        return vSCOBuff.PersonSCO.SetScoreMax(args);
		        break;

			// Receive the course time-out message. Usually not used. args = "time-out".
			case "cmi.core.exit" :
			case "cmi.exit" :
				return vSCOBuff.PersonSCO.SetExit(args);
				break;

			// Receive the course bookmark location. The screen ID number is sent everytime a course
			// screen is first displayed.
			case "cmi.location" :
			case "cmi.core.lesson_location" :
				//alert("api setting lesson_location = " + args);
				return vSCOBuff.PersonSCO.SetLocation(args);
				break;

			// Receive the lesson status: completed, incomplete, passed, failed
			// incomplete: sent when course first starts after LMSInitialize. Indicates course just started.
			// completed: sent when course is completed.
			// passed: sent when course is passed. Course can be "completed" and "passed".
			// failed: sent when course is failed. Course can be "completed" and "failed"
			case "cmi.completion_status":
			case "cmi.success_status":
			case "cmi.core.lesson_status" :
				//alert("api setting lesson_status = " + args);
				if (args=="passed" || args=="completed") fAdvanceCourseMap();
				return vSCOBuff.PersonSCO.SetStatus(args);
				break;
				
			case "cmi.core.entry":
				APIErrorCode = 204;
				return false;
				break;
				
			case "cmi.core.total_time":
			case "cmi.core.credit":
			case "cmi.core.launch_data":
			case "cmi.core.student_id":
			case "cmi.core.student_name":
				APIErrorCode = 403;
				return false;
				break;
				
			case "cmi.core._children":
			case "cmi.core.score._children":
				APIErrorCode = 402;
				return false;
				break;
			
			case "cmi.student_preference.language":
				return vSCOBuff.PersonSCO.SetLanguage(args);
				break;
			
		    case "cmi.comments":
		        return vSCOBuff.PersonSCO.SetComments(args);
		        break;
				
			default:
				APIErrorCode = 401;
				return "false";
				break;
		}
	}
	
//  LMSGetValue is called by the course as required to get values from the LMS
function LMSGetValue(command)
	{
        try {
            // Only output to log if command is not protected or full logging is enabled
            if (vFullLogging) {
                console.log("LMSGetValue  command="+command);
            } else {
                if (aProtectedCommands.indexOf(command) === -1) {
                    console.log("LMSGetValue  command="+command);
                }
            }
        }
        catch (exception) {
        }
		if (LMSFinishCalled == "true") {
			return "";
		}
		if (LMSInitSuccessful != "true") {
			APIErrorCode = 301;
			return "";
		}

		APIErrorCode = 0;

		switch (command) {
			case "cmi.suspend_data":
				return vSCOBuff.PersonSCO.Suspend;
				break;
				
			case "cmi.core.exit":
			case "cmi.core.session_time":
				APIErrorCode = 404;
				return false;
				break;
				
			case "cmi.location" :
			case "cmi.core.lesson_location":
				//alert("api returning lesson_location: " + vSCOBuff.PersonSCO.Location);
				return vSCOBuff.PersonSCO.Location;
				break;
				
			case "cmi.completion_status":
			case "cmi.success_status":
			case "cmi.core.lesson_status":
				//alert("api returning lesson_status: " + vSCOBuff.PersonSCO.Status);
				return vSCOBuff.PersonSCO.Status;
				break;
				
			case "cmi.core.entry":
				return vSCOBuff.PersonSCO.Entry;
				break;

			case "cmi.extended.scoid":
				return vSCOBuff.SCOID;
				break;
								
			case "cmi.core.total_time":
				return vSCOBuff.PersonSCO.TotalTime;
				break;
				
			case "cmi.core.credit":
				return vSCOBuff.PersonSCO.Credit;
				break;
				
			case "cmi.core.launch_data":
				return vSCOBuff.PersonSCO.Launch;
				break;
				
			case "cmi.core._children":
				return "student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,exit,session_time";
				break;
				
			case "cmi.core.student_id":
				return vSCOBuff.PersonID;
				break;
				
			case "cmi.core.student_name":
				return vSCOBuff.PersonName;
				break;
				
			case "cmi.core.score._children":
				return "raw,max";
				break;
				
			case "cmi.core.score.raw":
				return vSCOBuff.PersonSCO.ScoreRaw;
				break;
				
		    case "cmi.core.score.max":
		        return vSCOBuff.PersonSCO.ScoreMax;
		        break;
                
			case "cmi.student_preference._children":
				return "language";
				break;
				
			case "cmi.student_preference.language":
				if (vSCOBuff.PersonSCO.Language == null) {
					// default is "" if SCO requests language before setting it; leave null/blank until SCO specifically sets it
					return("");	
				} else {
					return vSCOBuff.PersonSCO.Language;
				}
				break;

		    case "cmi.comments":
	            return vSCOBuff.PersonSCO.Comments;
		        break;

									
            // @@@@@@@@@@@@@@@@@@@@
            // @@@ HACK for ILS @@@
            // @@@@@@@@@@@@@@@@@@@@
			case "cmi.mode":
				return "normal";
				break;
				
			default:
				APIErrorCode = 401;
				return "";
				break;
		}
	}


// @@@@@@@@@@@@@@@@@@@@
// @@@ HACK for ILS @@@
// @@@@@@@@@@@@@@@@@@@@

var API_1484_11 = window;
function Initialize(args)       { LMSInitialize(args); return  true;}
function Terminate(args)        { return LMSFinish(args); }
function GetValue(command)      { return LMSGetValue(command); }
function SetValue(command, args){ return LMSSetValue(command, args); }
function Commit(args)           { return LMSCommit(args); }
function GetLastError(args)     { return LMSGetLastError(args); }
function GetErrorString(args)   { return LMSGetErrorString(args); }
function GetDiagnostic(args)    { return LMSGetDiagnostic(args); }


</script>

</head>

<body style="border: 0px; padding: 0px; margin: 0px;" onLoad="fInitBrowserFlags();vSCOBuff.InitFromLMSDB();">

<!-- Submit data to lms server through this form. Set the action to the appropriate asp file.
	Use a full path name (ex. http://www.someplace.com/dirpaths/file.asp) -->
<form action="" method="post" name="serverParams" target="scormServerRequests" id="serverParams" class="borderless">
	<input type="hidden" id="mode" name="mode" value="">
	<input type="hidden" id="retake" name="retake" value="">
	<input type="hidden" id="scoID" name="scoID" value="">
    <input type="hidden" id="courseID" name="courseID" value="" />
	<input type="hidden" id="personSCOStatus" name="personSCOStatus" value="">
	<input type="hidden" id="personSCOLocation" name="personSCOLocation" value="">
	<input type="hidden" id="personSCOSessionTime" name="personSCOSessionTime" value="">
	<input type="hidden" id="personSCOTotalTime" name="personSCOTotalTime" value="">
	<input type="hidden" id="personSCOScoreRaw" name="personSCOScoreRaw" value="">
    <input type="hidden" id="personSCOScoreMax" name="personSCOScoreMax" value="">
	<input type="hidden" id="personSCOCredit" name="personSCOCredit" value="">
	<input type="hidden" id="personSCOEntry" name="personSCOEntry" value="">
	<input type="hidden" id="personSCOExit" name="personSCOExit" value="">
	<input type="hidden" id="personSCOSuspend" name="personSCOSuspend" value="">
	<input type="hidden" id="personSCOLaunch" name="personSCOLaunch" value="">
	<input type="hidden" id="personSCOLastUpdate" name="personSCOLastUpdate" value="">
	<input type="hidden" id="personSCOLanguage" name="personSCOLanguage" value="">
    <input type="hidden" id="personSCOComments" name="personSCOComments" value="">
	<input type="hidden" id="totalHours" name="totalHours" value="">
	<input type="hidden" id="recommend" name="recommend" value="">
</form>

<!-- Submit the form to this iframe so that the server responds invisibly -->
<iframe src="../Main/blank.htm" name="scormServerRequests" frameborder="0" id="scormServerRequests" style="visibility: hidden; position: relative; width: 0px; height: 0px;"></iframe> 
<!-- <iframe src="../Main/blank.htm" name="scormServerRequests" scrolling="yes" frameborder="0" id="scormServerRequests" style="visibility: visible; position: absolute; top:0px; left:0px; width: 400px; height:100px;"></iframe>-->
<!-- Load page in this iframe periodically to prevent session timeout -->
<iframe src="../Main/blank.htm" name="timeoutBlocker" id="timeoutBlocker" style="visibility: hidden; position: absolute; top: 0px; left: 0px; height:0px;"></iframe>
<iframe src="../Main/blank.htm" name="ASPNETTimeoutBlocker" id="ASPNETTimeoutBlocker" style="visibility: hidden; position: absolute; top: 0px; left: 0px; height:0px;"></iframe>

<!-- SCO "window". Set src after wrapper initializes to prevent it from setting or getting
	values before the server has returned with the initial data. -->
<iframe src="../Main/blank.htm" name="sco" scrolling="auto" frameborder="0" id="sco" style="height: 100%; width: 100%; position: absolute; top: 0px; left: 0px; z-index: auto;" onbeforeunload="alert('onbeforeunload');" onUnload="alert('onUnload');"></iframe>


</body>
</html>
